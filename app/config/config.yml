##### SECURITY SYSTEM SETTINGS #####

# The number of seconds to wait between saving images
# These images are returned in the /last_image slack slash command
min_save_seconds: 600

# The number of seconds to wait in between notifications on slack
min_notify_seconds: 10

# See if X% of the last 30 frames (~3 seconds) have been tagged as occupied
# If so, and the latest image is tagged as occupied, then a notification
# will be triggered
motion_classification_store_cnt: 30
min_occupied_fraction: 0.6 # at least ~2 seconds of motion

# Whether you want to train the system
# This will prompt you to tag the notifications in slack,
train: True
bucket: rpi-security-system # bucket to save tagged data in


##### MOTION MODEL CLASS SETTINGS #####

# The minimum area size of an image (in pixels) for a region to be considered
# motion or not. Smaller values will lead to more areas marked as motion,
# whereas higher values of min_area  will only mark larger regions as motion
min_area: 5000


##### MOTION DETECTOR CLASS SETTINGS #####

# Number of frames to store
frame_store_cnt: 30

# Number of PIR motion sensor values to store
pir_store_cnt: 300

# alpha regulates the update speed (how fast the accumulator forgets about earlier images)
# higher: average image tries to catch even very fast and short changes in the data
# lower: average becomes sluggish and it won't consider fast changes in the input images
alpha: 0.1

# Number of dilate iterations after thresholding
dilate_iterations: 2

# Kernel size for gaussian blurring
ksize: [21, 21]

# The minimum absolute value difference between our current frame and averaged
# frame for a given pixel to be triggered as motion. Smaller values will lead
# to more motion being detected, larger values to less motion detected.
delta_thresh: 5

# The width and height of the video frame from our Raspberry Pi camera
resolution: [640, 480]

# The desired Frames Per Second from our Raspberry Pi camera
fps: 10

# number of pixels in the frame
frame_width: 500

# Vertically flip the camera
vflip: True

# Horizontally flip the camera
hflip: True
